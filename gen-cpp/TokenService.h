/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef TokenService_H
#define TokenService_H

#include <TProcessor.h>
#include "proto_types.h"

namespace tw { namespace maple { namespace generated {

class TokenServiceIf {
 public:
  virtual ~TokenServiceIf() {}
  virtual void getToken(std::string& _return, const std::string& userId, const int32_t default_expire_time) = 0;
  virtual void removeToken(const std::string& token) = 0;
  virtual void checkToken(const std::string& token) = 0;
  virtual void getURL(std::string& _return, const std::string& token, const std::string& itemKey) = 0;
};

class TokenServiceNull : virtual public TokenServiceIf {
 public:
  virtual ~TokenServiceNull() {}
  void getToken(std::string& /* _return */, const std::string& /* userId */, const int32_t /* default_expire_time */) {
    return;
  }
  void removeToken(const std::string& /* token */) {
    return;
  }
  void checkToken(const std::string& /* token */) {
    return;
  }
  void getURL(std::string& /* _return */, const std::string& /* token */, const std::string& /* itemKey */) {
    return;
  }
};

typedef struct _TokenService_getToken_args__isset {
  _TokenService_getToken_args__isset() : userId(false), default_expire_time(false) {}
  bool userId;
  bool default_expire_time;
} _TokenService_getToken_args__isset;

class TokenService_getToken_args {
 public:

  TokenService_getToken_args() : userId(""), default_expire_time(30) {
  }

  virtual ~TokenService_getToken_args() throw() {}

  std::string userId;
  int32_t default_expire_time;

  _TokenService_getToken_args__isset __isset;

  bool operator == (const TokenService_getToken_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(default_expire_time == rhs.default_expire_time))
      return false;
    return true;
  }
  bool operator != (const TokenService_getToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenService_getToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenService_getToken_pargs {
 public:


  virtual ~TokenService_getToken_pargs() throw() {}

  const std::string* userId;
  const int32_t* default_expire_time;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenService_getToken_result__isset {
  _TokenService_getToken_result__isset() : success(false) {}
  bool success;
} _TokenService_getToken_result__isset;

class TokenService_getToken_result {
 public:

  TokenService_getToken_result() : success("") {
  }

  virtual ~TokenService_getToken_result() throw() {}

  std::string success;

  _TokenService_getToken_result__isset __isset;

  bool operator == (const TokenService_getToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenService_getToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenService_getToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenService_getToken_presult__isset {
  _TokenService_getToken_presult__isset() : success(false) {}
  bool success;
} _TokenService_getToken_presult__isset;

class TokenService_getToken_presult {
 public:


  virtual ~TokenService_getToken_presult() throw() {}

  std::string* success;

  _TokenService_getToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TokenService_removeToken_args__isset {
  _TokenService_removeToken_args__isset() : token(false) {}
  bool token;
} _TokenService_removeToken_args__isset;

class TokenService_removeToken_args {
 public:

  TokenService_removeToken_args() : token("") {
  }

  virtual ~TokenService_removeToken_args() throw() {}

  std::string token;

  _TokenService_removeToken_args__isset __isset;

  bool operator == (const TokenService_removeToken_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const TokenService_removeToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenService_removeToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenService_removeToken_pargs {
 public:


  virtual ~TokenService_removeToken_pargs() throw() {}

  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenService_removeToken_result__isset {
  _TokenService_removeToken_result__isset() : nfe(false) {}
  bool nfe;
} _TokenService_removeToken_result__isset;

class TokenService_removeToken_result {
 public:

  TokenService_removeToken_result() {
  }

  virtual ~TokenService_removeToken_result() throw() {}

  NotFoundException nfe;

  _TokenService_removeToken_result__isset __isset;

  bool operator == (const TokenService_removeToken_result & rhs) const
  {
    if (!(nfe == rhs.nfe))
      return false;
    return true;
  }
  bool operator != (const TokenService_removeToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenService_removeToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenService_removeToken_presult__isset {
  _TokenService_removeToken_presult__isset() : nfe(false) {}
  bool nfe;
} _TokenService_removeToken_presult__isset;

class TokenService_removeToken_presult {
 public:


  virtual ~TokenService_removeToken_presult() throw() {}

  NotFoundException nfe;

  _TokenService_removeToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TokenService_checkToken_args__isset {
  _TokenService_checkToken_args__isset() : token(false) {}
  bool token;
} _TokenService_checkToken_args__isset;

class TokenService_checkToken_args {
 public:

  TokenService_checkToken_args() : token("") {
  }

  virtual ~TokenService_checkToken_args() throw() {}

  std::string token;

  _TokenService_checkToken_args__isset __isset;

  bool operator == (const TokenService_checkToken_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const TokenService_checkToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenService_checkToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenService_checkToken_pargs {
 public:


  virtual ~TokenService_checkToken_pargs() throw() {}

  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenService_checkToken_result__isset {
  _TokenService_checkToken_result__isset() : nfe(false) {}
  bool nfe;
} _TokenService_checkToken_result__isset;

class TokenService_checkToken_result {
 public:

  TokenService_checkToken_result() {
  }

  virtual ~TokenService_checkToken_result() throw() {}

  NotFoundException nfe;

  _TokenService_checkToken_result__isset __isset;

  bool operator == (const TokenService_checkToken_result & rhs) const
  {
    if (!(nfe == rhs.nfe))
      return false;
    return true;
  }
  bool operator != (const TokenService_checkToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenService_checkToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenService_checkToken_presult__isset {
  _TokenService_checkToken_presult__isset() : nfe(false) {}
  bool nfe;
} _TokenService_checkToken_presult__isset;

class TokenService_checkToken_presult {
 public:


  virtual ~TokenService_checkToken_presult() throw() {}

  NotFoundException nfe;

  _TokenService_checkToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TokenService_getURL_args__isset {
  _TokenService_getURL_args__isset() : token(false), itemKey(false) {}
  bool token;
  bool itemKey;
} _TokenService_getURL_args__isset;

class TokenService_getURL_args {
 public:

  TokenService_getURL_args() : token(""), itemKey("") {
  }

  virtual ~TokenService_getURL_args() throw() {}

  std::string token;
  std::string itemKey;

  _TokenService_getURL_args__isset __isset;

  bool operator == (const TokenService_getURL_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(itemKey == rhs.itemKey))
      return false;
    return true;
  }
  bool operator != (const TokenService_getURL_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenService_getURL_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenService_getURL_pargs {
 public:


  virtual ~TokenService_getURL_pargs() throw() {}

  const std::string* token;
  const std::string* itemKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenService_getURL_result__isset {
  _TokenService_getURL_result__isset() : success(false), nfe(false) {}
  bool success;
  bool nfe;
} _TokenService_getURL_result__isset;

class TokenService_getURL_result {
 public:

  TokenService_getURL_result() : success("") {
  }

  virtual ~TokenService_getURL_result() throw() {}

  std::string success;
  NotFoundException nfe;

  _TokenService_getURL_result__isset __isset;

  bool operator == (const TokenService_getURL_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(nfe == rhs.nfe))
      return false;
    return true;
  }
  bool operator != (const TokenService_getURL_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenService_getURL_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenService_getURL_presult__isset {
  _TokenService_getURL_presult__isset() : success(false), nfe(false) {}
  bool success;
  bool nfe;
} _TokenService_getURL_presult__isset;

class TokenService_getURL_presult {
 public:


  virtual ~TokenService_getURL_presult() throw() {}

  std::string* success;
  NotFoundException nfe;

  _TokenService_getURL_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TokenServiceClient : virtual public TokenServiceIf {
 public:
  TokenServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TokenServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getToken(std::string& _return, const std::string& userId, const int32_t default_expire_time);
  void send_getToken(const std::string& userId, const int32_t default_expire_time);
  void recv_getToken(std::string& _return);
  void removeToken(const std::string& token);
  void send_removeToken(const std::string& token);
  void recv_removeToken();
  void checkToken(const std::string& token);
  void send_checkToken(const std::string& token);
  void recv_checkToken();
  void getURL(std::string& _return, const std::string& token, const std::string& itemKey);
  void send_getURL(const std::string& token, const std::string& itemKey);
  void recv_getURL(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TokenServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<TokenServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (TokenServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getURL(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TokenServiceProcessor(boost::shared_ptr<TokenServiceIf> iface) :
    iface_(iface) {
    processMap_["getToken"] = &TokenServiceProcessor::process_getToken;
    processMap_["removeToken"] = &TokenServiceProcessor::process_removeToken;
    processMap_["checkToken"] = &TokenServiceProcessor::process_checkToken;
    processMap_["getURL"] = &TokenServiceProcessor::process_getURL;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~TokenServiceProcessor() {}
};

class TokenServiceMultiface : virtual public TokenServiceIf {
 public:
  TokenServiceMultiface(std::vector<boost::shared_ptr<TokenServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TokenServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TokenServiceIf> > ifaces_;
  TokenServiceMultiface() {}
  void add(boost::shared_ptr<TokenServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getToken(std::string& _return, const std::string& userId, const int32_t default_expire_time) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getToken(_return, userId, default_expire_time);
        return;
      } else {
        ifaces_[i]->getToken(_return, userId, default_expire_time);
      }
    }
  }

  void removeToken(const std::string& token) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->removeToken(token);
    }
  }

  void checkToken(const std::string& token) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->checkToken(token);
    }
  }

  void getURL(std::string& _return, const std::string& token, const std::string& itemKey) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getURL(_return, token, itemKey);
        return;
      } else {
        ifaces_[i]->getURL(_return, token, itemKey);
      }
    }
  }

};

}}} // namespace

#endif
