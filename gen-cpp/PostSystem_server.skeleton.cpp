// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "PostSystem.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace tw::maple::generated;

class PostSystemHandler : virtual public PostSystemIf {
 public:
  PostSystemHandler() {
    // Your initialization goes here
  }

  void newPost(UUIDResponse& _return, const std::string& user, const std::string& content) {
    // Your implementation goes here
    printf("newPost\n");
  }

  ErrorCode::type deletePost(const UUID& post_id) {
    // Your implementation goes here
    printf("deletePost\n");
  }

  void newComment(UUIDResponse& _return, const UUID& post_id, const std::string& comment) {
    // Your implementation goes here
    printf("newComment\n");
  }

  ErrorCode::type rmComment(const UUID& post_id, const UUID& comment) {
    // Your implementation goes here
    printf("rmComment\n");
  }

  void getContent(std::string& _return, const UUID& post_id) {
    // Your implementation goes here
    printf("getContent\n");
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<PostSystemHandler> handler(new PostSystemHandler());
  shared_ptr<TProcessor> processor(new PostSystemProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

