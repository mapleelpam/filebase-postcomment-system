/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef PostSystem_H
#define PostSystem_H

#include <TProcessor.h>
#include "proto_types.h"

namespace tw { namespace maple { namespace generated {

class PostSystemIf {
 public:
  virtual ~PostSystemIf() {}
  virtual void newPost(UUID& _return, const std::string& user, const std::string& content) = 0;
  virtual bool deletePost(const UUID& post_id) = 0;
  virtual void newComment(UUID& _return, const UUID& post_id, const std::string& comment) = 0;
  virtual bool rmComment(const UUID& post_id, const UUID& comment) = 0;
  virtual void getContent(std::string& _return, const UUID& post_id) = 0;
  virtual void ping() = 0;
};

class PostSystemNull : virtual public PostSystemIf {
 public:
  virtual ~PostSystemNull() {}
  void newPost(UUID& /* _return */, const std::string& /* user */, const std::string& /* content */) {
    return;
  }
  bool deletePost(const UUID& /* post_id */) {
    bool _return = false;
    return _return;
  }
  void newComment(UUID& /* _return */, const UUID& /* post_id */, const std::string& /* comment */) {
    return;
  }
  bool rmComment(const UUID& /* post_id */, const UUID& /* comment */) {
    bool _return = false;
    return _return;
  }
  void getContent(std::string& /* _return */, const UUID& /* post_id */) {
    return;
  }
  void ping() {
    return;
  }
};

typedef struct _PostSystem_newPost_args__isset {
  _PostSystem_newPost_args__isset() : user(false), content(false) {}
  bool user;
  bool content;
} _PostSystem_newPost_args__isset;

class PostSystem_newPost_args {
 public:

  PostSystem_newPost_args() : user(""), content("") {
  }

  virtual ~PostSystem_newPost_args() throw() {}

  std::string user;
  std::string content;

  _PostSystem_newPost_args__isset __isset;

  bool operator == (const PostSystem_newPost_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const PostSystem_newPost_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostSystem_newPost_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PostSystem_newPost_pargs {
 public:


  virtual ~PostSystem_newPost_pargs() throw() {}

  const std::string* user;
  const std::string* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostSystem_newPost_result__isset {
  _PostSystem_newPost_result__isset() : success(false) {}
  bool success;
} _PostSystem_newPost_result__isset;

class PostSystem_newPost_result {
 public:

  PostSystem_newPost_result() : success("") {
  }

  virtual ~PostSystem_newPost_result() throw() {}

  UUID success;

  _PostSystem_newPost_result__isset __isset;

  bool operator == (const PostSystem_newPost_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PostSystem_newPost_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostSystem_newPost_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostSystem_newPost_presult__isset {
  _PostSystem_newPost_presult__isset() : success(false) {}
  bool success;
} _PostSystem_newPost_presult__isset;

class PostSystem_newPost_presult {
 public:


  virtual ~PostSystem_newPost_presult() throw() {}

  UUID* success;

  _PostSystem_newPost_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PostSystem_deletePost_args__isset {
  _PostSystem_deletePost_args__isset() : post_id(false) {}
  bool post_id;
} _PostSystem_deletePost_args__isset;

class PostSystem_deletePost_args {
 public:

  PostSystem_deletePost_args() : post_id("") {
  }

  virtual ~PostSystem_deletePost_args() throw() {}

  UUID post_id;

  _PostSystem_deletePost_args__isset __isset;

  bool operator == (const PostSystem_deletePost_args & rhs) const
  {
    if (!(post_id == rhs.post_id))
      return false;
    return true;
  }
  bool operator != (const PostSystem_deletePost_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostSystem_deletePost_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PostSystem_deletePost_pargs {
 public:


  virtual ~PostSystem_deletePost_pargs() throw() {}

  const UUID* post_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostSystem_deletePost_result__isset {
  _PostSystem_deletePost_result__isset() : success(false) {}
  bool success;
} _PostSystem_deletePost_result__isset;

class PostSystem_deletePost_result {
 public:

  PostSystem_deletePost_result() : success(0) {
  }

  virtual ~PostSystem_deletePost_result() throw() {}

  bool success;

  _PostSystem_deletePost_result__isset __isset;

  bool operator == (const PostSystem_deletePost_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PostSystem_deletePost_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostSystem_deletePost_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostSystem_deletePost_presult__isset {
  _PostSystem_deletePost_presult__isset() : success(false) {}
  bool success;
} _PostSystem_deletePost_presult__isset;

class PostSystem_deletePost_presult {
 public:


  virtual ~PostSystem_deletePost_presult() throw() {}

  bool* success;

  _PostSystem_deletePost_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PostSystem_newComment_args__isset {
  _PostSystem_newComment_args__isset() : post_id(false), comment(false) {}
  bool post_id;
  bool comment;
} _PostSystem_newComment_args__isset;

class PostSystem_newComment_args {
 public:

  PostSystem_newComment_args() : post_id(""), comment("") {
  }

  virtual ~PostSystem_newComment_args() throw() {}

  UUID post_id;
  std::string comment;

  _PostSystem_newComment_args__isset __isset;

  bool operator == (const PostSystem_newComment_args & rhs) const
  {
    if (!(post_id == rhs.post_id))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const PostSystem_newComment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostSystem_newComment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PostSystem_newComment_pargs {
 public:


  virtual ~PostSystem_newComment_pargs() throw() {}

  const UUID* post_id;
  const std::string* comment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostSystem_newComment_result__isset {
  _PostSystem_newComment_result__isset() : success(false) {}
  bool success;
} _PostSystem_newComment_result__isset;

class PostSystem_newComment_result {
 public:

  PostSystem_newComment_result() : success("") {
  }

  virtual ~PostSystem_newComment_result() throw() {}

  UUID success;

  _PostSystem_newComment_result__isset __isset;

  bool operator == (const PostSystem_newComment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PostSystem_newComment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostSystem_newComment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostSystem_newComment_presult__isset {
  _PostSystem_newComment_presult__isset() : success(false) {}
  bool success;
} _PostSystem_newComment_presult__isset;

class PostSystem_newComment_presult {
 public:


  virtual ~PostSystem_newComment_presult() throw() {}

  UUID* success;

  _PostSystem_newComment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PostSystem_rmComment_args__isset {
  _PostSystem_rmComment_args__isset() : post_id(false), comment(false) {}
  bool post_id;
  bool comment;
} _PostSystem_rmComment_args__isset;

class PostSystem_rmComment_args {
 public:

  PostSystem_rmComment_args() : post_id(""), comment("") {
  }

  virtual ~PostSystem_rmComment_args() throw() {}

  UUID post_id;
  UUID comment;

  _PostSystem_rmComment_args__isset __isset;

  bool operator == (const PostSystem_rmComment_args & rhs) const
  {
    if (!(post_id == rhs.post_id))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const PostSystem_rmComment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostSystem_rmComment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PostSystem_rmComment_pargs {
 public:


  virtual ~PostSystem_rmComment_pargs() throw() {}

  const UUID* post_id;
  const UUID* comment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostSystem_rmComment_result__isset {
  _PostSystem_rmComment_result__isset() : success(false) {}
  bool success;
} _PostSystem_rmComment_result__isset;

class PostSystem_rmComment_result {
 public:

  PostSystem_rmComment_result() : success(0) {
  }

  virtual ~PostSystem_rmComment_result() throw() {}

  bool success;

  _PostSystem_rmComment_result__isset __isset;

  bool operator == (const PostSystem_rmComment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PostSystem_rmComment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostSystem_rmComment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostSystem_rmComment_presult__isset {
  _PostSystem_rmComment_presult__isset() : success(false) {}
  bool success;
} _PostSystem_rmComment_presult__isset;

class PostSystem_rmComment_presult {
 public:


  virtual ~PostSystem_rmComment_presult() throw() {}

  bool* success;

  _PostSystem_rmComment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PostSystem_getContent_args__isset {
  _PostSystem_getContent_args__isset() : post_id(false) {}
  bool post_id;
} _PostSystem_getContent_args__isset;

class PostSystem_getContent_args {
 public:

  PostSystem_getContent_args() : post_id("") {
  }

  virtual ~PostSystem_getContent_args() throw() {}

  UUID post_id;

  _PostSystem_getContent_args__isset __isset;

  bool operator == (const PostSystem_getContent_args & rhs) const
  {
    if (!(post_id == rhs.post_id))
      return false;
    return true;
  }
  bool operator != (const PostSystem_getContent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostSystem_getContent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PostSystem_getContent_pargs {
 public:


  virtual ~PostSystem_getContent_pargs() throw() {}

  const UUID* post_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostSystem_getContent_result__isset {
  _PostSystem_getContent_result__isset() : success(false) {}
  bool success;
} _PostSystem_getContent_result__isset;

class PostSystem_getContent_result {
 public:

  PostSystem_getContent_result() : success("") {
  }

  virtual ~PostSystem_getContent_result() throw() {}

  std::string success;

  _PostSystem_getContent_result__isset __isset;

  bool operator == (const PostSystem_getContent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PostSystem_getContent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostSystem_getContent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostSystem_getContent_presult__isset {
  _PostSystem_getContent_presult__isset() : success(false) {}
  bool success;
} _PostSystem_getContent_presult__isset;

class PostSystem_getContent_presult {
 public:


  virtual ~PostSystem_getContent_presult() throw() {}

  std::string* success;

  _PostSystem_getContent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PostSystem_ping_args {
 public:

  PostSystem_ping_args() {
  }

  virtual ~PostSystem_ping_args() throw() {}


  bool operator == (const PostSystem_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PostSystem_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostSystem_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PostSystem_ping_pargs {
 public:


  virtual ~PostSystem_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PostSystem_ping_result {
 public:

  PostSystem_ping_result() {
  }

  virtual ~PostSystem_ping_result() throw() {}


  bool operator == (const PostSystem_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PostSystem_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostSystem_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PostSystem_ping_presult {
 public:


  virtual ~PostSystem_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PostSystemClient : virtual public PostSystemIf {
 public:
  PostSystemClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PostSystemClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void newPost(UUID& _return, const std::string& user, const std::string& content);
  void send_newPost(const std::string& user, const std::string& content);
  void recv_newPost(UUID& _return);
  bool deletePost(const UUID& post_id);
  void send_deletePost(const UUID& post_id);
  bool recv_deletePost();
  void newComment(UUID& _return, const UUID& post_id, const std::string& comment);
  void send_newComment(const UUID& post_id, const std::string& comment);
  void recv_newComment(UUID& _return);
  bool rmComment(const UUID& post_id, const UUID& comment);
  void send_rmComment(const UUID& post_id, const UUID& comment);
  bool recv_rmComment();
  void getContent(std::string& _return, const UUID& post_id);
  void send_getContent(const UUID& post_id);
  void recv_getContent(std::string& _return);
  void ping();
  void send_ping();
  void recv_ping();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PostSystemProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<PostSystemIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (PostSystemProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_newPost(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePost(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newComment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmComment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getContent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PostSystemProcessor(boost::shared_ptr<PostSystemIf> iface) :
    iface_(iface) {
    processMap_["newPost"] = &PostSystemProcessor::process_newPost;
    processMap_["deletePost"] = &PostSystemProcessor::process_deletePost;
    processMap_["newComment"] = &PostSystemProcessor::process_newComment;
    processMap_["rmComment"] = &PostSystemProcessor::process_rmComment;
    processMap_["getContent"] = &PostSystemProcessor::process_getContent;
    processMap_["ping"] = &PostSystemProcessor::process_ping;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~PostSystemProcessor() {}
};

class PostSystemMultiface : virtual public PostSystemIf {
 public:
  PostSystemMultiface(std::vector<boost::shared_ptr<PostSystemIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PostSystemMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PostSystemIf> > ifaces_;
  PostSystemMultiface() {}
  void add(boost::shared_ptr<PostSystemIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void newPost(UUID& _return, const std::string& user, const std::string& content) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->newPost(_return, user, content);
        return;
      } else {
        ifaces_[i]->newPost(_return, user, content);
      }
    }
  }

  bool deletePost(const UUID& post_id) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->deletePost(post_id);
      } else {
        ifaces_[i]->deletePost(post_id);
      }
    }
  }

  void newComment(UUID& _return, const UUID& post_id, const std::string& comment) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->newComment(_return, post_id, comment);
        return;
      } else {
        ifaces_[i]->newComment(_return, post_id, comment);
      }
    }
  }

  bool rmComment(const UUID& post_id, const UUID& comment) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->rmComment(post_id, comment);
      } else {
        ifaces_[i]->rmComment(post_id, comment);
      }
    }
  }

  void getContent(std::string& _return, const UUID& post_id) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getContent(_return, post_id);
        return;
      } else {
        ifaces_[i]->getContent(_return, post_id);
      }
    }
  }

  void ping() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->ping();
    }
  }

};

}}} // namespace

#endif
